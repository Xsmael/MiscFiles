{
  "name": "Node-logger",
  "tagline": "A simple and lightweight nodejs logging library.",
  "body": "[![GitHub license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/mkozjak/node-telnet-client/blob/master/LICENSE)\r\n\r\n[![NPM](https://nodei.co/npm/noogger.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/noogger/)\r\n\r\n# Noogger (Node-logger)\r\n\r\nA simple logging module for node.js\r\n\r\n\r\n[![Build Status](https://travis-ci.org/websockets/ws.svg?branch=master)](https://travis-ci.org/websockets/ws)\r\n\r\n`Noogger` is a simple featured logger module that helps you displaying logs to the console with log levels and pretty colors\r\n as well as writing logs files in a clean an organized way.\r\nNo need to implement the logging mechanism for your node applications anymore.\r\n\r\n\r\n### Installing\r\nInstall it locally in your project or globally:\r\n```\r\nnpm install noogger\r\nnpm install -g noogger\r\n```\r\n\r\n## Features\r\n\r\n-  write daily log file, handy for servers, or applications that run continously\r\n-  Forwards(prints) logging data to the console output if needed (optional)\r\n-  En/Disable Console output with respect to log levels \r\n-  En/Disable File output with respect to log levels \r\n-  pretty colors in console output\r\n-  Supported log levels (as per cisco and many other manufacturer standards):\r\n\tEMERGENCY(0)\r\n\tALERT(1)\r\n\tCRITICAL(2)\r\n\tERROR(3)\r\n\tWARNING(4)\r\n\tNOTICE(5)\r\n\tINFO(6)\r\n\tDEBUG(7)\r\n-  Customize date-time format for log lines and for log file name\r\n\r\n## Usage\r\n\r\n#### Basic (with default parameters)\r\n\r\n```js\r\nvar log = require('noogger');\r\n...\r\n...\r\nlog.emergency(\"This is an EMERGENCY!!! THE WORLD IS COLLAPSING\");\r\nlog.alert(\"OMGGGG!\");\r\nlog.critical(\"This is getting critical!\");\r\nlog.error(\"Erro 0x04512 Failed to initialize the initialization module\");\r\nlog.warning(\"something is wrong\");\r\nlog.notice(\"Hey! have you noticed This?!\");\r\nlog.info(\"Hello World! Booting..\");\r\nlog.debug(\"something Happened!\");\r\n\r\n```\r\nThe log file will look like this\r\n```\r\n28-04-2016 20:16:45.5 [WARNING] something is wrong\r\n28-04-2016 20:16:45.5 [ERROR] Failed to initialize the...\r\n28-04-2016 20:16:45.5 [DEBUG] something Happened!\r\n28-04-2016 20:17:06.6 [ERROR] telnet socket closed\r\n```\r\n\r\n#### With custom options\r\n\r\n```js\r\nvar logParams = {\r\n\tconsoleOutput : true,\r\n\tconsoleOutputLevel: ['DEBUG','ERROR','WARNING'],\r\n\t\r\n\tdateTimeFormat: \"DD-MM-YYYY HH:mm:ss.S\",\r\n\toutputPath: \"logs/\",\r\n\tfileNameDateFormat: \"DDMMYYYY\",\r\n\tfileNamePrefix:\"myApp-\"\r\n};\r\n\r\nvar log = require('noogger').init(logParams);\r\n\r\n```\r\nor\r\n```js\r\nvar log = require('noogger');\r\n\r\nvar logParams = {\r\n\tconsoleOutput : true,\r\n\tconsoleOutputLevel:'DEBUG',\r\n\t\r\n\tdateTimeFormat: \"DD-MM-YYYY HH:mm:ss\",\r\n\tfileNameDateFormat: \"YYYY-MM-DD\",\r\n\tfileNamePrefix:\"myApp-\",\r\n\toutputPath: \"myLogs/\"\r\n};\r\n\r\n\r\nlog.init(logParams);\r\n```\r\n\r\n## Default Parameters: \r\n```\r\n\tconsoleOutput : true,\r\n\tconsoleOutputLevel: 7, \r\n\t\r\n\tfileOutput: true,\r\n\tfileOutputLevel: 7, \r\n\t\r\n\toutputPath: \"logs/\",\r\n\tfileNameDateFormat: \"DDMMYYYY\",\r\n\tdateTimeFormat: \"DD-MM-YYYY HH:mm:ss.S\",\r\n\t\r\n\tfileNamePrefix:\"\",\r\n\tfileNameSuffix:\"\",\r\n\tcustomIntro: null\r\n```\r\n\r\n## Parameters: \r\n-  \t`consoleOutput` : `boolean` : Wether the logs should be printed on the console output as well, or not\r\n-  \t`consoleOutputLevel` : `int` or `string` or `array`  : Filters what is printed to the console with respect to log levels (specify the console output log level).\r\n   \tusing int: from 0 to 7 \r\n  \tusing string: any valid log level (DEBUG, INFO, ERROR,....)\r\n  \tusing array: to allow to select multiple log levels without the constraint of order  eg: ['DEBUG','ERROR','WARNING']\r\n-  \t`fileOutput` : `boolean` : Wether the logs should be written to files or not\r\n-  \t`consoleOutputLevel` : `int` or `string` or `array`  : Filters what is written to log files with respect to log levels (works the same as consoleOutputLevel).\r\n-  \t`outputPath` : `string` : define the location where the log files  will be written\r\n-  \t`dateTimeFormat` : `string` : specifies the Date and time format to be used inside log file for each record.\r\n                             refer to the date format section.\r\n-  \t`fileNameDateFormat`: `string` : the date format to be used in the log files name to differentiate them (per day); \r\n                               you can alter this, so that it will write one file per week or month or whatever you want,\r\n                               refer to the date format section.\r\n-  \t`fileNamePrefix`: `string` : Prepends the given string to every log file name.\r\n-  \t`fileNameSuffix`: `string` : Appends the given string to every log file name.\r\n-  \t`customIntro`: `function` or `boolean` : Just. try it by stting it to true :) or supply your own function to be called when your application starts(at least at the point where you initialize noogger)\r\n\r\n\r\n## Date and Time formatting\r\n\r\nThe formating is based on the moment.js library, since it is the one used.\r\nSo please refer to [this page][1].\r\n\r\nSubmit any issue or request to the [github page][2].\r\n\r\n[1]: http://momentjs.com/docs/#/displaying/format/\r\n[2]: https://github.com/Xsmael/node-logger/issues\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}